Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: declaration_list : declaration_list COMMA ID

a,b

Line 2: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

a,b,c[3]

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c[3];

Line 2: statement : var_declaration

int a,b,c[3];

Line 2: statements : statement

int a,b,c[3];

Line 3: variable : ID

b

Line 3: factor : CONST_INT

3

Line 3: unary_expression : factor

3

Line 3: term : unary_expression

3

Line 3: simple_expression : term

3

Line 3: rel_expression : simple_expression

3

Line 3: logic_expression : rel_expression

3

Line 3: expression : variable ASSIGNOP logic_expression

b=3

Line 3: expression_statement : expression SEMICOLON

b=3;

Line 3: statement : expression_statement

b=3;

Line 3: statements : statements statement

int a,b,c[3];
b=3;

Line 4: factor : CONST_INT

1

Line 4: unary_expression : factor

1

Line 4: term : unary_expression

1

Line 4: simple_expression : term

1

Line 4: rel_expression : simple_expression

1

Line 4: logic_expression : rel_expression

1

Line 4: expression : logic_expression

1

Line 5: factor : CONST_INT

0

Line 5: unary_expression : factor

0

Line 5: term : unary_expression

0

Line 5: simple_expression : term

0

Line 5: rel_expression : simple_expression

0

Line 5: logic_expression : rel_expression

0

Line 5: expression : logic_expression

0

Line 6: variable : ID

a

Line 6: factor : CONST_INT

10

Line 6: unary_expression : factor

10

Line 6: term : unary_expression

10

Line 6: simple_expression : term

10

Line 6: rel_expression : simple_expression

10

Line 6: logic_expression : rel_expression

10

Line 6: expression : variable ASSIGNOP logic_expression

a=10

Line 6: expression_statement : expression SEMICOLON

a=10;

Line 6: statement : expression_statement

a=10;

Line 6: statements : statement

a=10;

Line 7: compound_statement : LCURL statements RCURL

{
a=10;
}




ScopeTable # 1.1.1.1

ScopeTable # 1.1.1

ScopeTable # 1.1
 7 --> < a , ID >::stackOffset=-2
 8 --> < b , ID >::stackOffset=-4
 9 --> < c , ID >::stackOffset=-10

ScopeTable # 1
 7 --> < main , ID >::stackOffset=0



Line 7: statement : compound_statement

{
a=10;
}


Line 8: variable : ID

a

Line 8: factor : CONST_INT

11

Line 8: unary_expression : factor

11

Line 8: term : unary_expression

11

Line 8: simple_expression : term

11

Line 8: rel_expression : simple_expression

11

Line 8: logic_expression : rel_expression

11

Line 8: expression : variable ASSIGNOP logic_expression

a=11

Line 8: expression_statement : expression SEMICOLON

a=11;

Line 8: statement : expression_statement

a=11;

Line 8: statement : IF LPAREN expression RPAREN statement ELSE statement

if(0){
a=10;
}
else
a=11;

Line 8: statements : statement

if(0){
a=10;
}
else
a=11;

Line 9: compound_statement : LCURL statements RCURL

{
if(0){
a=10;
}
else
a=11;
}




ScopeTable # 1.1.1

ScopeTable # 1.1
 7 --> < a , ID >::stackOffset=-2
 8 --> < b , ID >::stackOffset=-4
 9 --> < c , ID >::stackOffset=-10

ScopeTable # 1
 7 --> < main , ID >::stackOffset=0



Line 9: statement : compound_statement

{
if(0){
a=10;
}
else
a=11;
}


Line 10: variable : ID

a

Line 10: factor : CONST_INT

0

Line 10: unary_expression : factor

0

Line 10: term : unary_expression

0

Line 10: simple_expression : term

0

Line 10: rel_expression : simple_expression

0

Line 10: logic_expression : rel_expression

0

Line 10: expression : variable ASSIGNOP logic_expression

a=0

Line 10: expression_statement : expression SEMICOLON

a=0;

Line 10: statement : expression_statement

a=0;

Line 10: statement : IF LPAREN expression RPAREN statement ELSE statement

if(1){
if(0){
a=10;
}
else
a=11;
}
else
a=0;

Line 10: statements : statements statement

int a,b,c[3];
b=3;
if(1){
if(0){
a=10;
}
else
a=11;
}
else
a=0;

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);

Line 11: statements : statements statement

int a,b,c[3];
b=3;
if(1){
if(0){
a=10;
}
else
a=11;
}
else
a=0;
println(a);

Line 12: compound_statement : LCURL statements RCURL

{
int a,b,c[3];
b=3;
if(1){
if(0){
a=10;
}
else
a=11;
}
else
a=0;
println(a);
}




ScopeTable # 1.1
 7 --> < a , ID >::stackOffset=-2
 8 --> < b , ID >::stackOffset=-4
 9 --> < c , ID >::stackOffset=-10

ScopeTable # 1
 7 --> < main , ID >::stackOffset=0



Line 12: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c[3];
b=3;
if(1){
if(0){
a=10;
}
else
a=11;
}
else
a=0;
println(a);
}




Line 12: unit : func_definition

int main(){
int a,b,c[3];
b=3;
if(1){
if(0){
a=10;
}
else
a=11;
}
else
a=0;
println(a);
}




Line 12: program : unit

int main(){
int a,b,c[3];
b=3;
if(1){
if(0){
a=10;
}
else
a=11;
}
else
a=0;
println(a);
}




Line 13: start : program


ScopeTable # 1
 7 --> < main , ID >::stackOffset=0


Total lines: 13
Total errors: 0
