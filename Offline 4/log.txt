Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: declaration_list : declaration_list COMMA ID

a,b

Line 2: declaration_list : declaration_list COMMA ID

a,b,c

Line 2: declaration_list : declaration_list COMMA ID

a,b,c,i

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c,i;

Line 2: statement : var_declaration

int a,b,c,i;

Line 2: statements : statement

int a,b,c,i;

Line 3: variable : ID

b

Line 3: factor : CONST_INT

0

Line 3: unary_expression : factor

0

Line 3: term : unary_expression

0

Line 3: simple_expression : term

0

Line 3: rel_expression : simple_expression

0

Line 3: logic_expression : rel_expression

0

Line 3: expression : variable ASSIGNOP logic_expression

b=0

Line 3: expression_statement : expression SEMICOLON

b=0;

Line 3: statement : expression_statement

b=0;

Line 3: statements : statements statement

int a,b,c,i;
b=0;

Line 4: variable : ID

c

Line 4: factor : CONST_INT

3

Line 4: unary_expression : factor

3

Line 4: term : unary_expression

3

Line 4: simple_expression : term

3

Line 4: rel_expression : simple_expression

3

Line 4: logic_expression : rel_expression

3

Line 4: expression : variable ASSIGNOP logic_expression

c=3

Line 4: expression_statement : expression SEMICOLON

c=3;

Line 4: statement : expression_statement

c=3;

Line 4: statements : statements statement

int a,b,c,i;
b=0;
c=3;

Line 5: variable : ID

c

Line 5: factor : variable DECOP

c--

Line 5: unary_expression : factor

c--

Line 5: term : unary_expression

c--

Line 5: simple_expression : term

c--

Line 5: rel_expression : simple_expression

c--

Line 5: logic_expression : rel_expression

c--

Line 5: expression : logic_expression

c--

Line 6: variable : ID

b

Line 6: factor : variable INCOP

b++

Line 6: unary_expression : factor

b++

Line 6: term : unary_expression

b++

Line 6: simple_expression : term

b++

Line 6: rel_expression : simple_expression

b++

Line 6: logic_expression : rel_expression

b++

Line 6: expression : logic_expression

b++

Line 6: expression_statement : expression SEMICOLON

b++;

Line 6: statement : expression_statement

b++;

Line 6: statements : statement

b++;

Line 7: compound_statement : LCURL statements RCURL

{
b++;
}




ScopeTable # 1.1.1

ScopeTable # 1.1
 7 --> < a , ID >::stackOffset=-2
 8 --> < b , ID >::stackOffset=-4
 9 --> < c , ID >::stackOffset=-6
 15 --> < i , ID >::stackOffset=-8

ScopeTable # 1
 7 --> < main , ID >::stackOffset=0



Line 7: statement : compound_statement

{
b++;
}


Line 7: statement : WHILE LPAREN expression RPAREN statement

while(c--){
b++;
}


Line 7: statements : statements statement

int a,b,c,i;
b=0;
c=3;
while(c--){
b++;
}


Line 8: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(b);

Line 8: statements : statements statement

int a,b,c,i;
b=0;
c=3;
while(c--){
b++;
}

println(b);

Line 9: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(c);

Line 9: statements : statements statement

int a,b,c,i;
b=0;
c=3;
while(c--){
b++;
}

println(b);
println(c);

Line 10: compound_statement : LCURL statements RCURL

{
int a,b,c,i;
b=0;
c=3;
while(c--){
b++;
}

println(b);
println(c);
}




ScopeTable # 1.1
 7 --> < a , ID >::stackOffset=-2
 8 --> < b , ID >::stackOffset=-4
 9 --> < c , ID >::stackOffset=-6
 15 --> < i , ID >::stackOffset=-8

ScopeTable # 1
 7 --> < main , ID >::stackOffset=0



Line 10: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c,i;
b=0;
c=3;
while(c--){
b++;
}

println(b);
println(c);
}




Line 10: unit : func_definition

int main(){
int a,b,c,i;
b=0;
c=3;
while(c--){
b++;
}

println(b);
println(c);
}




Line 10: program : unit

int main(){
int a,b,c,i;
b=0;
c=3;
while(c--){
b++;
}

println(b);
println(c);
}




Line 11: start : program


ScopeTable # 1
 7 --> < main , ID >::stackOffset=0


Total lines: 11
Total errors: 0
