Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

i

Line 2: declaration_list : declaration_list COMMA ID

i,j

Line 2: declaration_list : declaration_list COMMA ID

i,j,a

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int i,j,a;

Line 2: statement : var_declaration

int i,j,a;

Line 2: statements : statement

int i,j,a;

Line 3: variable : ID

a

Line 3: factor : CONST_INT

0

Line 3: unary_expression : factor

0

Line 3: term : unary_expression

0

Line 3: simple_expression : term

0

Line 3: rel_expression : simple_expression

0

Line 3: logic_expression : rel_expression

0

Line 3: expression : variable ASSIGNOP logic_expression

a=0

Line 3: expression_statement : expression SEMICOLON

a=0;

Line 3: statement : expression_statement

a=0;

Line 3: statements : statements statement

int i,j,a;
a=0;

Line 4: variable : ID

i

Line 4: factor : CONST_INT

0

Line 4: unary_expression : factor

0

Line 4: term : unary_expression

0

Line 4: simple_expression : term

0

Line 4: rel_expression : simple_expression

0

Line 4: logic_expression : rel_expression

0

Line 4: expression : variable ASSIGNOP logic_expression

i=0

Line 4: expression_statement : expression SEMICOLON

i=0;

Line 4: variable : ID

i

Line 4: factor : variable

i

Line 4: unary_expression : factor

i

Line 4: term : unary_expression

i

Line 4: simple_expression : term

i

Line 4: factor : CONST_INT

5

Line 4: unary_expression : factor

5

Line 4: term : unary_expression

5

Line 4: simple_expression : term

5

Line 4: rel_expression : simple_expression RELOP simple_expression

i<5

Line 4: logic_expression : rel_expression

i<5

Line 4: expression : logic_expression

i<5

Line 4: expression_statement : expression SEMICOLON

i<5;

Line 4: variable : ID

i

Line 4: factor : variable INCOP

i++

Line 4: unary_expression : factor

i++

Line 4: term : unary_expression

i++

Line 4: simple_expression : term

i++

Line 4: rel_expression : simple_expression

i++

Line 4: logic_expression : rel_expression

i++

Line 4: expression : logic_expression

i++

Line 5: variable : ID

j

Line 5: factor : CONST_INT

0

Line 5: unary_expression : factor

0

Line 5: term : unary_expression

0

Line 5: simple_expression : term

0

Line 5: rel_expression : simple_expression

0

Line 5: logic_expression : rel_expression

0

Line 5: expression : variable ASSIGNOP logic_expression

j=0

Line 5: expression_statement : expression SEMICOLON

j=0;

Line 5: variable : ID

j

Line 5: factor : variable

j

Line 5: unary_expression : factor

j

Line 5: term : unary_expression

j

Line 5: simple_expression : term

j

Line 5: variable : ID

i

Line 5: factor : variable

i

Line 5: unary_expression : factor

i

Line 5: term : unary_expression

i

Line 5: simple_expression : term

i

Line 5: rel_expression : simple_expression RELOP simple_expression

j<=i

Line 5: logic_expression : rel_expression

j<=i

Line 5: expression : logic_expression

j<=i

Line 5: expression_statement : expression SEMICOLON

j<=i;

Line 5: variable : ID

j

Line 5: factor : variable INCOP

j++

Line 5: unary_expression : factor

j++

Line 5: term : unary_expression

j++

Line 5: simple_expression : term

j++

Line 5: rel_expression : simple_expression

j++

Line 5: logic_expression : rel_expression

j++

Line 5: expression : logic_expression

j++

Line 6: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);

Line 6: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(j=0;j<=i;j++)println(a);

Line 6: statements : statement

for(j=0;j<=i;j++)println(a);

Line 7: compound_statement : LCURL statements RCURL

{
for(j=0;j<=i;j++)println(a);
}




ScopeTable # 1.1.1

ScopeTable # 1.1
 7 --> < a , ID >::stackOffset=-6
 15 --> < i , ID >::stackOffset=-2
 16 --> < j , ID >::stackOffset=-4

ScopeTable # 1
 7 --> < main , ID >::stackOffset=0



Line 7: statement : compound_statement

{
for(j=0;j<=i;j++)println(a);
}


Line 7: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0;i<5;i++){
for(j=0;j<=i;j++)println(a);
}


Line 7: statements : statements statement

int i,j,a;
a=0;
for(i=0;i<5;i++){
for(j=0;j<=i;j++)println(a);
}


Line 8: compound_statement : LCURL statements RCURL

{
int i,j,a;
a=0;
for(i=0;i<5;i++){
for(j=0;j<=i;j++)println(a);
}

}




ScopeTable # 1.1
 7 --> < a , ID >::stackOffset=-6
 15 --> < i , ID >::stackOffset=-2
 16 --> < j , ID >::stackOffset=-4

ScopeTable # 1
 7 --> < main , ID >::stackOffset=0



Line 8: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int i,j,a;
a=0;
for(i=0;i<5;i++){
for(j=0;j<=i;j++)println(a);
}

}




Line 8: unit : func_definition

int main(){
int i,j,a;
a=0;
for(i=0;i<5;i++){
for(j=0;j<=i;j++)println(a);
}

}




Line 8: program : unit

int main(){
int i,j,a;
a=0;
for(i=0;i<5;i++){
for(j=0;j<=i;j++)println(a);
}

}




Line 9: start : program


ScopeTable # 1
 7 --> < main , ID >::stackOffset=0


Total lines: 9
Total errors: 0
