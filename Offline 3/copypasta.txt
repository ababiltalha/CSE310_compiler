# error printing from y

errorCount++;
fprintf(errorout, "Error at line %d: Multiple declaration of function %s\n\n", lineCount, funcName.c_str());
fprintf(logout, "Error at line %d: Multiple declaration of function %s\n\n", lineCount, funcName.c_str());

# normal case

$$ = new SymbolInfo($1->getName()+","+$3->getName()+"["+$5->getName()+"]", "declaration_list");
fprintf(logout, "Line %d: expression : logic_expression\n\n%s\n\n", lineCount, $$->getName().c_str());
delete $1;
delete $3;

 statement statements compound_statement expression_statement

 | 
			{
				table.enterScope();
			}

variable : ID 		
	 {
		SymbolInfo *temp = table.lookUpSymbol($1->getName());
		//handle undeclared variable error
		if(temp==nullptr){
			errorCount++;
			fprintf(errorout, "Error at line %d: Undeclared variable %s\n\n", lineCount, $1->getName().c_str());
			fprintf(logout, "Error at line %d: Undeclared variable %s\n\n", lineCount, $1->getName().c_str());
			$$ = new SymbolInfo($1->getName(),"variable");
		}
		else $$ = new SymbolInfo(temp->getName(), temp->getType());
		fprintf(logout, "Line %d: variable : ID\n\n%s\n\n", lineCount, $$->getName().c_str());
		delete $1;
	 }
	 | ID LTHIRD expression RTHIRD 
	 {
		SymbolInfo *temp = table.lookUpSymbol($1->getName());
		if(temp==nullptr){
			errorCount++;
			fprintf(errorout, "Error at line %d: Undeclared variable %s\n\n", lineCount, $1->getName().c_str());
			fprintf(logout, "Error at line %d: Undeclared variable %s\n\n", lineCount, $1->getName().c_str());
			$$ = new SymbolInfo($1->getName()+"["+$3->getName()+"]","variable");
		}
		else {
			string varType = temp->getType();
			if ((varType.find("[") != string::npos) || (varType.find("]") != string::npos)) { // is an array
				// handle [float] error
				if ($3->getType()!="int"){
					errorCount++;
					fprintf(errorout, "Error at line %d: Expression inside third bracket not an integer\n\n", lineCount);
					fprintf(logout, "Error at line %d: Expression inside third bracket not an integer\n\n", lineCount);
				}
				$$ = new SymbolInfo($1->getName()+"["+$3->getName()+"]", getArrayName(varType));
			} 
			else { 
				errorCount++;
				fprintf(errorout, "Error at line %d: %s not an array\n\n", lineCount, $1->getName().c_str());
				fprintf(logout, "Error at line %d: %s not an array\n\n", lineCount, $1->getName().c_str());
				$$ = new SymbolInfo($1->getName()+"["+$3->getName()+"]","variable");
			}
		}
		fprintf(logout, "Line %d: variable : ID LTHIRD expression RTHIRD\n\n%s\n\n", lineCount, $$->getName().c_str());
		delete $1;
		delete $3;
	 }
	 ;